# -*- mode: perl; -*-
# Copyright 2016-2016 The OpenSSL Project Authors. All Rights Reserved.
#
# Licensed under the OpenSSL license (the "License").  You may not use
# this file except in compliance with the License.  You can obtain a copy
# in the file LICENSE in the source distribution or at
# https://www.openssl.org/source/license.html


## SSL test configurations

package ssltests;

use OpenSSL::Test::Utils;

our @tests = ();

my @tests_tls1_3 = (
    {
        name => "no-compressed-certificates",
        server => {
          "Options" => "-CertificateCompression",
        },
        client => {
          "Options" => "-CertificateCompression",
          "MinProtocol" => "TLSv1.3",
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "server-compressed-certificates",
        server => {
          "Options" => "CertificateCompression",
        },
        client => {
          "Options" => "-CertificateCompression",
          "MinProtocol" => "TLSv1.3",
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "client-compressed-certificates",
        server => {
          "Options" => "-CertificateCompression",
        },
        client => {
          "Options" => "CertificateCompression",
          "MinProtocol" => "TLSv1.3",
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "both-compressed-certificates",
        server => {
          "Options" => "CertificateCompression",
        },
        client => {
          "Options" => "CertificateCompression",
          "MinProtocol" => "TLSv1.3",
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "no-compressed-certificates-mtls",
        server => {
          "Options" => "-CertificateCompression",
          "VerifyCAFile" => test_pem("root-cert.pem"),
          "VerifyMode" => "Request",
        },
        client => {
          "Options" => "-CertificateCompression",
          "MinProtocol" => "TLSv1.3",
          "Certificate" => test_pem("ee-client-chain.pem"),
          "PrivateKey"  => test_pem("ee-key.pem"),
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "server-compressed-certificates-mtls",
        server => {
          "Options" => "CertificateCompression",
          "VerifyCAFile" => test_pem("root-cert.pem"),
          "VerifyMode" => "Request",
        },
        client => {
          "Options" => "-CertificateCompression",
          "MinProtocol" => "TLSv1.3",
          "Certificate" => test_pem("ee-client-chain.pem"),
          "PrivateKey"  => test_pem("ee-key.pem"),
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "client-compressed-certificates-mtls",
        server => {
          "Options" => "-CertificateCompression",
          "VerifyCAFile" => test_pem("root-cert.pem"),
          "VerifyMode" => "Request",
        },
        client => {
          "Options" => "CertificateCompression",
          "MinProtocol" => "TLSv1.3",
          "Certificate" => test_pem("ee-client-chain.pem"),
          "PrivateKey"  => test_pem("ee-key.pem"),
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
    {
        name => "both-compressed-certificates-mtls",
        server => {
          "Options" => "CertificateCompression",
          "VerifyCAFile" => test_pem("root-cert.pem"),
          "VerifyMode" => "Request",
        },
        client => {
          "Options" => "CertificateCompression",
          "MinProtocol" => "TLSv1.3",
          "Certificate" => test_pem("ee-client-chain.pem"),
          "PrivateKey"  => test_pem("ee-key.pem"),
        },
        test   => {
          "ExpectedResult" => "Success",
        },
    },
);

push @tests, @tests_tls1_3 unless disabled("tls1_3");
